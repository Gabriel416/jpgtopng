{"version":3,"file":"static/webpack/static/development/pages/index.js.bed21f12f69d2c02a30c.hot-update.js","sources":["webpack:///./containers/FileConversion/index.js"],"sourcesContent":["import { useState, useEffect, useReducer } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowRight } from \"@fortawesome/free-solid-svg-icons\";\nimport axios from \"axios\";\n\nimport Upload from \"../../components/Upload\";\nimport SelectInput from \"../../components/SelectInput\";\nimport FileResult from \"../../components/FileResult\";\n\nconst FileConversion = ({ firebase }) => {\n  const reducer = (state, action) => {\n    switch (action.type) {\n      case \"setFiles\": {\n        return {\n          files: {\n            ...state.files,\n            [action.payload.id]: action.payload\n          }\n        };\n      }\n\n      case \"updateFile\": {\n        state.files[action.payload.id] = {\n          ...state.files[action.payload.id],\n          ...action.payload\n        };\n        return {\n          ...state\n        };\n      }\n\n      default: {\n        return state;\n      }\n    }\n  };\n\n  const [state, dispatch] = useReducer(reducer, { files: {} });\n  const [fromFile, setFromFile] = useState(\"\");\n  const [toFile, setToFile] = useState(\"\");\n\n  useEffect(() => {\n    const currentDomain = window.location.hostname;\n    switch (currentDomain) {\n      case \"jpgtopng.co\":\n        setFromFile(\"JPG\");\n        setToFile(\"PNG\");\n        break;\n      case \"pngtojpg.co\":\n        setFromFile(\"PNG\");\n        setToFile(\"JPG\");\n        break;\n      default:\n        setFromFile(\"JPG\");\n        setToFile(\"PNG\");\n        break;\n    }\n  }, []);\n\n  const processImage = async (fileMetaData, originalFile) => {\n    console.log(fileMetaData, \"fiile meta data\");\n    // return \"HElLO\";\n    // process.env.FIREBASE_CLOUD_IMAGE_API\n    // http://localhost:5000/file-converter-bddf8/us-central1/processImage\n    const payload = JSON.stringify({\n      imageData: fileMetaData,\n      fromFile,\n      toFile\n    });\n\n    // axios\n    //   .post(\n    //     \"http://localhost:5000/file-converter-bddf8/us-central1/processImage\",\n    //     payload,\n    //     {\n    //       headers: { \"Content-Type\": \"application/json\" }\n    //     }\n    //   )\n    //   .then(({ data }) => {\n    //     console.log(data, \"res\");\n    //     return data[0].metadata;\n    //   })\n    //   .catch(err => {\n    //     throw new Error(err);\n    //   });\n\n    try {\n      const { data } = axios.post(\n        \"http://localhost:5000/file-converter-bddf8/us-central1/processImage\",\n        payload,\n        {\n          headers: { \"Content-Type\": \"application/json\" }\n        }\n      );\n      console.log(data, \"data in async\");\n      return data[0].metadata;\n    } catch (err) {\n      throw new Error(err);\n    }\n  };\n\n  const renderResults = files => {\n    return Object.keys(files).map(fileIndex => {\n      const file = files[fileIndex];\n      return <FileResult file={file} key={file.id} />;\n    });\n  };\n\n  const onDrop = (acceptedFiles, rejectedFiles) => {\n    console.log(acceptedFiles, \"accepted files\");\n    const storageRef = firebase.storage().ref();\n    acceptedFiles.forEach(file => {\n      file.id = Date.now();\n      const metaData = {\n        contentType: file.type,\n        size: file.size,\n        lastModified: `${new Date(file.lastModified).toLocaleDateString(\n          \"en-US\"\n        )} ${new Date(file.lastModified).toLocaleTimeString(\"en-US\")}`\n      };\n\n      const task = storageRef.child(file.name).put(file, metaData);\n\n      task.on(\n        \"state_changed\",\n        snapshot => {\n          let uploadPercentage =\n            (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n          dispatch({\n            type: \"updateFile\",\n            payload: {\n              ...file,\n              uploadPercentage\n            }\n          });\n        },\n        () => {\n          dispatch({\n            type: \"updateFile\",\n            payload: {\n              ...file,\n              failed: true\n            }\n          });\n        },\n        async () => {\n          // succesful upload\n          const metadata = await task.snapshot.ref.getMetadata();\n          const processedImageData = await processImage(metadata);\n          console.log(processedImageData, \"image data right here\");\n          // task.snapshot.ref\n          //   .getMetadata()\n          //   .then(metadata => {\n          //     return new Promise(resolve => {\n          //       resolve(processImage(metadata, file));\n          //     });\n          //   })\n          //   .then(processedImageData => {\n          //     console.log(processedImageData, \"proccessed data\");\n          //     dispatch({\n          //       type: \"updateFile\",\n          //       payload: {\n          //         ...file,\n          //         name: processedImageData.name,\n          //         size: processedImageData.size,\n          //         downloadUrl: processedImageData.mediaLink\n          //       }\n          //     });\n          //   })\n          //   .catch(err => {\n          //     dispatch({\n          //       type: \"updateFile\",\n          //       payload: {\n          //         ...file,\n          //         failed: true\n          //       }\n          //     });\n          //   });\n        }\n      );\n    });\n  };\n\n  return (\n    <main className=\"file-conversion-wrapper\">\n      <h1>File Conversion App</h1>\n      <section>\n        <Upload onDrop={onDrop} fromFile={fromFile} />\n        <div className=\"file-picker-wrapper\">\n          <SelectInput selectedFile={fromFile} onSelect={setFromFile} />\n          <p>\n            <FontAwesomeIcon style={{ fontSize: \"24px\" }} icon={faArrowRight} />\n          </p>\n          <SelectInput selectedFile={toFile} onSelect={setToFile} />\n        </div>\n      </section>\n      {Object.keys(state.files).length > 0 && renderResults(state.files)}\n      <style jsx>{`\n        main {\n          margin: 70px auto;\n          padding: 0 10px;\n          max-width: 800px;\n        }\n\n        section {\n          padding: 20px;\n          border-radius: 5px;\n          border: 2px solid rgba(56, 153, 236, 0);\n          box-shadow: rgba(22, 45, 61, 0.1) 0px 1px 2px 0px;\n          background-color: #ffffff;\n        }\n\n        .file-picker-wrapper {\n          display: flex;\n          justify-content: space-evenly;\n          align-items: center;\n        }\n\n        @media screen and (max-width: 500px) {\n          section {\n            padding: 15px;\n          }\n        }\n      `}</style>\n    </main>\n  );\n};\n\nexport default FileConversion;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AADA;AAMA;AACA;AACA;AAAA;AACA;AAIA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAtBA;AAwBA;AACA;AA3BA;AA4BA;AAAA;AA5BA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AA+BA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAZA;AAcA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA;AAAA;AAgCA;AAAA;AAAA;AADA;AAIA;AAnCA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAyCA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAQA;AAEA;AAGA;AAEA;AACA;AACA;AAEA;AAFA;AAFA;AAOA;AAEA;AACA;AACA;AAEA;AAFA;AAFA;AAOA;AArBA;AAAA;AAAA;AAAA;AAsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AAFA;AAAA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmCA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AATA;AAAA;AAAA;AA0CA;AACA;AACA;;;;A","sourceRoot":""}