{"version":3,"file":"static/webpack/static/development/pages/index.js.9294691a0e55bf330120.hot-update.js","sources":["webpack:///./containers/FileConversion/index.js"],"sourcesContent":["import { useState, useEffect, useReducer } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowRight } from \"@fortawesome/free-solid-svg-icons\";\nimport axios from \"axios\";\n\nimport Upload from \"../../components/Upload\";\nimport SelectInput from \"../../components/SelectInput\";\nimport FinishedFile from \"../../components/FinishedFile\";\n\nconst FileConversion = ({ firebase }) => {\n  const reducer = (state, action) => {\n    console.log(state, action, \"reducer call\");\n    switch (action.type) {\n      case \"setFiles\": {\n        return {\n          ...state,\n          files: action.payload\n        };\n      }\n      default: {\n        return state;\n      }\n    }\n  };\n\n  const [state, dispatch] = useReducer(reducer, { files: [] });\n\n  // const [files, setFiles] = useState([]);\n  const [fromFile, setFromFile] = useState(\"\");\n  const [toFile, setToFile] = useState(\"\");\n\n  useEffect(() => {\n    const currentDomain = window.location.hostname;\n    switch (currentDomain) {\n      case currentDomain:\n        setFromFile(\"JPG\");\n        setToFile(\"PNG\");\n        break;\n\n      default:\n        break;\n    }\n  }, []);\n\n  const processImage = (fileMetaData, originalFile) => {\n    // process.env.FIREBASE_CLOUD_IMAGE_API\n    // http://localhost:5000/file-converter-bddf8/us-central1/processImage\n    const payload = JSON.stringify({\n      imageData: fileMetaData,\n      fromFile,\n      toFile\n    });\n    axios\n      .post(process.env.FIREBASE_CLOUD_IMAGE_API, payload, {\n        headers: { \"Content-Type\": \"application/json\" }\n      })\n      .then(function(response) {\n        console.log(\"HIT 2\");\n        const transformedFile = response.data[0].metadata.mediaLink;\n        return transformedFile;\n        // const updatedeFileRecord = files.find(\n        //   file => file.fileId === originalFile.fileId\n        // );\n        // const newFilesArray = files.filter(\n        //   file => file.fileId !== originalFile.fileId\n        // );\n\n        dispatch({\n          type: \"setFiles\",\n          payload: {\n            ...originalFile,\n            downloadUrl: transformedFile\n          }\n        });\n        console.log(state, \"state in response from service\");\n\n        // setFiles([\n        //   ...newFilesArray,\n        //   {\n        //     ...updatedeFileRecord,\n        //     downloadUrl: transformedFile\n        //   }\n        // ]);\n\n        // console.log(files, \"FILES FINISHED\");\n      })\n      .catch(function(error) {\n        console.log(error, \"ERROR\");\n      });\n    return;\n  };\n\n  const onDrop = (acceptedFiles, rejectedFiles) => {\n    const storageRef = firebase.storage().ref();\n    acceptedFiles.forEach(file => {\n      console.log(file, \"FILE\");\n      file.fileId = Date.now();\n      file.downloadUrl = null;\n      const metaData = {\n        contentType: file.type,\n        size: file.size,\n        lastModified: `${new Date(file.lastModified).toLocaleDateString(\n          \"en-US\"\n        )} ${new Date(file.lastModified).toLocaleTimeString(\"en-US\")}`\n      };\n\n      const task = storageRef.child(file.name).put(file, metaData);\n\n      task\n        .then(imageData => imageData.metadata)\n        .then(metadata => processImage(metadata, file))\n        .then(() => {\n          console.log(\"3\");\n        });\n\n      // task.on(\n      //   \"state_changed\",\n      //   function progress(snapshot) {\n      //     let percentage =\n      //       (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n      //     console.log(\"HIT 1\");\n      //   },\n      //   function error(err) {\n      //     console.log(err, \"ERR SNAPS\");\n      //   },\n      //   function() {\n      //     // succesful upload\n      //     task.snapshot.ref\n      //       .getMetadata()\n      //       .then(metadata => processImage(metadata, file))\n      //       .then(url => {\n      //         console.log(\"HIT 3, URL\");\n      //       });\n      //   }\n      // );\n    });\n  };\n\n  return (\n    <main className=\"file-conversion-wrapper\">\n      <h1>File Conversion App</h1>\n      <section>\n        <Upload onDrop={onDrop} />\n        <div>file types here</div>\n        <div className=\"file-picker-wrapper\">\n          <SelectInput selectedFile={fromFile} onSelect={setFromFile} />\n          <p>\n            <FontAwesomeIcon style={{ fontSize: \"24px\" }} icon={faArrowRight} />\n          </p>\n          <SelectInput selectedFile={toFile} onSelect={setToFile} />\n        </div>\n        <div>download here</div>\n      </section>\n      <style jsx>{`\n        main {\n          margin: 70px auto;\n          padding: 0 10px;\n          max-width: 800px;\n        }\n\n        section {\n          padding: 20px;\n          border-radius: 5px;\n          border: 2px solid rgba(56, 153, 236, 0);\n          box-shadow: rgba(22, 45, 61, 0.1) 0px 1px 2px 0px;\n          background-color: #ffffff;\n        }\n\n        .file-picker-wrapper {\n          display: flex;\n          justify-content: space-evenly;\n          align-items: center;\n        }\n\n        @media screen and (max-width: 500px) {\n          section {\n            padding: 15px;\n          }\n        }\n      `}</style>\n    </main>\n  );\n};\n\nexport default FileConversion;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AATA;AAWA;AACA;AAfA;AAgBA;AAAA;AAhBA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAqBA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AAEA;AAAA;AAAA;AADA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAFA;AAOA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAQA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAZA;AAAA;AAAA;AA2CA;AACA;AACA;;;;A","sourceRoot":""}