{"version":3,"file":"static/webpack/static/development/pages/index.js.144456607d97978a800d.hot-update.js","sources":["webpack:///./containers/FileConversion/index.js"],"sourcesContent":["import { useState, useEffect, useReducer } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowRight } from \"@fortawesome/free-solid-svg-icons\";\nimport axios from \"axios\";\n\nimport Upload from \"../../components/Upload\";\nimport SelectInput from \"../../components/SelectInput\";\nimport FinishedFile from \"../../components/FinishedFile\";\n\nconst FileConversion = ({ firebase }) => {\n  // const reducer = (state, action) => {\n  //   switch (action.type) {\n  //     case \"setFiles\":\n  //       return { files: [...state.files, action.payload] };\n  //     default:\n  //       throw new Error();\n  //   }\n  // };\n\n  const reducer = (state, action) => {\n    switch (action.type) {\n      case \"setFiles\": {\n        return {\n          files: {\n            ...state.files,\n            [action.payload.id]: action.payload\n          }\n        };\n      }\n\n      case \"updateFile\": {\n        state.files[action.payload.id] = {\n          ...state.files[action.payload.id],\n          ...action.payload\n        };\n        return {\n          ...state\n        };\n      }\n\n      default: {\n        return state;\n      }\n    }\n  };\n\n  const [state, dispatch] = useReducer(reducer, { files: {} });\n  const [fromFile, setFromFile] = useState(\"\");\n  const [toFile, setToFile] = useState(\"\");\n\n  useEffect(() => {\n    const currentDomain = window.location.hostname;\n    switch (currentDomain) {\n      case currentDomain:\n        setFromFile(\"JPG\");\n        setToFile(\"PNG\");\n        break;\n\n      default:\n        break;\n    }\n  }, []);\n\n  const processImage = async (fileMetaData, originalFile) => {\n    // process.env.FIREBASE_CLOUD_IMAGE_API\n    // http://localhost:5000/file-converter-bddf8/us-central1/processImage\n    const payload = JSON.stringify({\n      imageData: fileMetaData,\n      fromFile,\n      toFile\n    });\n\n    try {\n      const { data } = await axios.post(\n        process.env.FIREBASE_CLOUD_IMAGE_API,\n        payload,\n        {\n          headers: { \"Content-Type\": \"application/json\" }\n        }\n      );\n      console.log(\"HIT 2\");\n      return data[0].metadata.mediaLink;\n    } catch (err) {\n      throw new Error(err);\n    }\n  };\n\n  const onDrop = (acceptedFiles, rejectedFiles) => {\n    const storageRef = firebase.storage().ref();\n    acceptedFiles.forEach(file => {\n      console.log(file, \"FILE\");\n      file.id = Date.now();\n      file.downloadUrl = null;\n      file.percentage = 0;\n      const metaData = {\n        contentType: file.type,\n        size: file.size,\n        lastModified: `${new Date(file.lastModified).toLocaleDateString(\n          \"en-US\"\n        )} ${new Date(file.lastModified).toLocaleTimeString(\"en-US\")}`\n      };\n\n      const task = storageRef.child(file.name).put(file, metaData);\n\n      // dispatch({\n      //   type: \"setFiles\",\n      //   payload: file\n      // });\n\n      // task\n      //   .then(imageData => imageData.metadata)\n      //   .then(metadata => processImage(metadata, file))\n      //   .then(downloadUrl => {\n      //     console.log(downloadUrl, \"3\");\n      //   })\n      //   .catch(err => console.log(err, \"err\"));\n\n      task.on(\n        \"state_changed\",\n        snapshot => {\n          let percentage =\n            (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n          console.log(percentage, \"HIT 1\");\n          dispatch({\n            type: \"updateFile\",\n            payload: {\n              ...file,\n              percentage\n            }\n          });\n        },\n        function error(err) {\n          console.log(err, \"ERR SNAPS\");\n        },\n        function() {\n          // succesful upload\n          task.snapshot.ref\n            .getMetadata()\n            .then(metadata => processImage(metadata, file))\n            .then(url => {\n              dispatch({\n                type: \"updateFile\",\n                payload: {\n                  ...file,\n                  downloadUrl: url\n                }\n              });\n\n              console.log(\"HIT 3, URL\");\n            });\n        }\n      );\n    });\n  };\n\n  return (\n    <main className=\"file-conversion-wrapper\">\n      <h1>File Conversion App</h1>\n      <section>\n        <Upload onDrop={onDrop} />\n        <div>file types here</div>\n        <div className=\"file-picker-wrapper\">\n          <SelectInput selectedFile={fromFile} onSelect={setFromFile} />\n          <p>\n            <FontAwesomeIcon style={{ fontSize: \"24px\" }} icon={faArrowRight} />\n          </p>\n          <SelectInput selectedFile={toFile} onSelect={setToFile} />\n        </div>\n        {/* <div>download here</div> */}\n      </section>\n      {state.files &&\n        Object.keys(state.files).map(fileIndex => {\n          let file = state.files[fileIndex];\n          console.log(file, \"FILE IN RENDER HERERERERER\");\n          return (\n            <div key={file.id}>\n              {file.name}\n              <p>helloooooo</p>\n            </div>\n          );\n        })}\n      <style jsx>{`\n        main {\n          margin: 70px auto;\n          padding: 0 10px;\n          max-width: 800px;\n        }\n\n        section {\n          padding: 20px;\n          border-radius: 5px;\n          border: 2px solid rgba(56, 153, 236, 0);\n          box-shadow: rgba(22, 45, 61, 0.1) 0px 1px 2px 0px;\n          background-color: #ffffff;\n        }\n\n        .file-picker-wrapper {\n          display: flex;\n          justify-content: space-evenly;\n          align-items: center;\n        }\n\n        @media screen and (max-width: 500px) {\n          section {\n            padding: 15px;\n          }\n        }\n      `}</style>\n    </main>\n  );\n};\n\nexport default FileConversion;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AADA;AAMA;AACA;AACA;AAAA;AACA;AAIA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAtBA;AAwBA;AACA;AApCA;AAqCA;AAAA;AArCA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAwCA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAAA;AAAA;AAcA;AAAA;AAAA;AADA;AACA;AAdA;AAAA;AAUA;AAOA;AAjBA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAQA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AAFA;AAFA;AAOA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AAEA;AAFA;AAFA;AAQA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAxBA;AAAA;AAAA;AAsDA;AACA;AACA;;;;A","sourceRoot":""}